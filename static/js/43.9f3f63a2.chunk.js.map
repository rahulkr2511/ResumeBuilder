{"version":3,"file":"static/js/43.9f3f63a2.chunk.js","mappings":"6IA4BO,MAAMA,EAA2B,WAA2C,IAA1CC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACxE,MAAM,eACFG,EAAiB,sBAAqB,WACtCC,EAAa,GAAE,eACfC,EAAiB,CAAC,eAClBN,EAyEJ,MAAO,CAAEO,uBAvEqBC,EAAAA,EAAAA,cAAaC,IACvC,MAAMC,EAAcD,EAAYE,iBAAiB,KACjD,IAAIC,EAAa,GAkEjB,OA/DIP,IACAO,GAAcP,GAIbA,IACDO,GAAc,sBACPR,UAAuBA,2KAKvBA,2MAMAA,8FAGAA,qIAIAA,qLAKAA,gQAOAA,kJAQXM,EAAYG,SAAQ,CAACC,EAAIC,KACrB,MAAMC,EAAWC,OAAOC,iBAAiBJ,GACnCK,EAAY,gBAAgBJ,IAClCD,EAAGM,UAAUC,IAAIF,GAEjB,IAAIG,EAAY,IAAIH,QACpBI,MAAMC,KAAKR,GAAUH,SAAQY,IACzB,MAAMC,EAAQV,EAASW,iBAAiBF,GAGpCC,IAAUpB,EAAesB,MAAKC,GAAYJ,EAAKK,WAAWD,OAC1DP,GAAa,KAAKG,MAASC,OAC/B,IAEJJ,GAAa,MACbV,GAAcU,CAAS,IAGpBV,CAAU,GAClB,CAACR,EAAgBC,EAAYC,IAGpC,C,kCCtGO,MAAMyB,EAAS,CAElBC,MAAO,UACPC,MAAO,UAGPC,OAAQ,CACJC,MAAO,UACPC,OAAQ,UACRC,KAAM,WAIVC,WAAY,CACRH,MAAO,UACPF,MAAO,UACPM,MAAO,UACPC,YAAa,WAIjBC,MAAO,CACHT,MAAO,WAIXU,KAAM,CACFT,MAAO,UACPD,MAAO,UACPK,KAAM,WAIVM,OAAQ,qBAGRC,KAAM,CACFC,QAAS,UACTC,UAAW,UACXX,MAAO,UACPE,KAAM,W,qHCbd,MAAMU,EAA4CC,IAAqC,IAApC,OAAEC,EAAM,OAAEC,EAAM,WAAEC,GAAYH,EAC7E,OACII,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,UAAU,SACVC,GAAI,CACAC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,OACRC,gBAAiB9B,EAAAA,EAAOO,WAAWL,MACnC6B,UAAW,aAAa/B,EAAAA,EAAOY,SAC/BoB,OAAQ,IACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,QAAS,UACXC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHC,QAAQ,YACRC,QAASvB,EACTwB,WAAWJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,IACzBnB,GAAI,CACAM,gBAAiB9B,EAAAA,EAAOa,KAAKC,QAC7B8B,MAAO5C,EAAAA,EAAOW,KAAKT,MACnB,UAAW,CACP4B,gBAAiB9B,EAAAA,EAAOa,KAAKE,WAEjC,qBAAsB,CAClB6B,MAAO5C,EAAAA,EAAOW,KAAKT,QAEzBmC,SAEDQ,EAAAA,EAAsBC,QAE3BzB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAES,QAAS,OAAQc,IAAK,GAAIV,SAAA,EACjCC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHC,QAAQ,YACRC,QAAStB,EACTK,GAAI,CACAM,gBAAiB9B,EAAAA,EAAOa,KAAKC,QAC7B8B,MAAO5C,EAAAA,EAAOW,KAAKT,MACnB,UAAW,CACP4B,gBAAiB9B,EAAAA,EAAOa,KAAKE,YAEnCsB,SAEDQ,EAAAA,EAAsBG,gBAE3BV,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACHC,QAAQ,YACRE,WAAWJ,EAAAA,EAAAA,KAACW,EAAAA,EAAY,IACxBR,QAASrB,EACTI,GAAI,CACAM,gBAAiB9B,EAAAA,EAAOa,KAAKC,QAC7B8B,MAAO5C,EAAAA,EAAOW,KAAKT,MACnB,UAAW,CACP4B,gBAAiB9B,EAAAA,EAAOa,KAAKE,WAEjC,qBAAsB,CAClB6B,MAAO5C,EAAAA,EAAOW,KAAKT,QAEzBmC,SAEDQ,EAAAA,EAAsBK,gBAG7B,EAId,EAAeC,EAAAA,KAAWnC,E,2TC3E1B,MAAMoC,EAAa,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACrFC,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA8QJ,EAtPoDpC,IAAyF,IAAxF,MAAEtB,EAAK,SAAE2D,EAAQ,UAAEC,GAAY,EAAK,cAAEC,GAAgB,EAAK,MAAEC,EAAK,aAAEC,GAAczC,EACnI,MAAO0C,EAAeC,IAAoBC,EAAAA,EAAAA,UAA6B,MAEjEC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,WAAY,CACRC,EAAAA,EAAWC,UAAU,CACjBC,QAAS,CACLC,OAAQ,CAAC,EAAG,GACZC,eAAgB,CACZC,MAAO,qBAInBC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EAAUT,UAAU,CAChBU,MAAO,CAAC,UAAW,aACnBC,iBAAkBrB,EAAgB,SAAW,UAGrDsB,QAASnF,EACToF,SAAUC,IAA2C,IAA1C,OAAElB,GAAkCkB,EAC3C1B,EAASQ,EAAOmB,UAAU,EAE9BC,YAAa,CACTC,WAAY,CACRb,MAAOf,EAAY,wBAA0B,qBAGrD6B,SAAUC,IAA2C,IAA1C,OAAEvB,GAAkCuB,EACvC3B,GAAgBI,GAChBA,EAAOwB,QAAQC,QAAQC,SAAS9B,GAAc+B,KAClD,IAIR,IAAK3B,EACD,OAAO,KAGX,MAKM4B,EAAkBA,IACb5B,EAAO6B,cAAc,aAAa/C,OAAS,UAOhDgD,EAAmBA,KACrBhC,EAAiB,KAAK,EAQ1B,OACIvC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACE,GAAI,CAAEC,SAAU,YAAaY,SAAA,EAC9BC,EAAAA,EAAAA,KAACuD,EAAAA,GAAa,CACV/B,OAAQA,EACRL,MAAOA,IAEVK,IACGxB,EAAAA,EAAAA,KAACwD,EAAAA,GAAU,CAAChC,OAAQA,EAAQiC,aAAc,CAAEC,SAAU,KAAO5G,UAAU,cAAaiD,UAChFhB,EAAAA,EAAAA,MAAC4E,EAAAA,EAAK,CAACC,UAAW,EAAG1E,GAAI,CAAES,QAAS,OAAQc,IAAK,EAAGoD,EAAG,IAAM9D,SAAA,CACxDkB,IACGlC,EAAAA,EAAAA,MAAA+E,EAAAA,SAAA,CAAA/D,SAAA,EACIC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,YAAWjE,UACtBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQiB,cAAc,CAAEC,MAAO,IAAKhB,MAClE7C,MAAOkB,EAAO4C,SAAS,UAAW,CAAED,MAAO,IAAO,UAAY,UAC9DE,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAACsE,EAAAA,EAAS,CAACC,SAAS,eAG5BvE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,YAAWjE,UACtBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQiB,cAAc,CAAEC,MAAO,IAAKhB,MAClE7C,MAAOkB,EAAO4C,SAAS,UAAW,CAAED,MAAO,IAAO,UAAY,UAC9DE,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAACsE,EAAAA,EAAS,CAACC,SAAS,QAAQpD,MAAO,CAAEoD,SAAU,gBAGvDvE,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,QAGhD1E,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,OAAMjE,UACjBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQ0B,aAAaxB,MACnD7C,MAAOkB,EAAO4C,SAAS,QAAU,UAAY,UAC7CC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAAC4E,EAAAA,EAAc,CAACL,SAAS,eAGjCvE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,SAAQjE,UACnBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQ4B,eAAe1B,MACrD7C,MAAOkB,EAAO4C,SAAS,UAAY,UAAY,UAC/CC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAgB,CAACP,SAAS,eAGnCvE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,YAAWjE,UACtBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQ8B,kBAAkB5B,MACxD7C,MAAOkB,EAAO4C,SAAS,aAAe,UAAY,UAClDC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAACgF,EAAAA,EAAoB,CAACT,SAAS,eAGvCvE,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,KACxC1E,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,aAAYjE,UACvBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QA3EF8E,IACtB3D,EAAiB2D,EAAMC,cAAc,EA2Ebb,KAAK,QACLnF,GAAI,CACAoB,MAAO8C,IACP,UAAW,CAAE9C,MAAO8C,MACtBrD,UAEFC,EAAAA,EAAAA,KAACmF,EAAAA,EAAmB,CAACZ,SAAS,eAGtCvE,EAAAA,EAAAA,KAACoF,EAAAA,GAAO,CACJC,KAAMC,QAAQjE,GACdkE,SAAUlE,EACVmE,QAASlC,EACTmC,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBC,gBAAiB,CACbF,SAAU,MACVC,WAAY,UACd5F,UAEFC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAK,CAACzE,GAAI,CAAE2E,EAAG,EAAGlE,QAAS,OAAQc,IAAK,GAAKoF,SAAU,OAAQC,SAAU,KAAM/F,SAC3EgB,EAAOgF,KAAKzF,IACTN,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAAaC,MAAO1D,EAAMP,UAC9BC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IA9FtBG,KACvBkB,EAAOwB,QAAQC,QAAQC,SAAS5C,GAAO6C,MACvCG,GAAkB,EA4FiC0C,CAAkB1F,GACjC+D,KAAK,QACLnF,GAAI,CACA+G,MAAO,GACP1G,OAAQ,GACRC,gBAAiBc,EACjB4F,OAAQ,iBACR,UAAW,CACP1G,gBAAiBc,EACjB6F,QAAS,QAXX7F,UAmB1BN,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,KACxC1E,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,cAAajE,UACxBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQmD,mBAAmBjD,MACzD7C,MAAOkB,EAAO4C,SAAS,cAAgB,UAAY,UACnDC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAACqG,EAAAA,EAAsB,CAAC9B,SAAS,eAGzCvE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,gBAAejE,UAC1BC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQqD,oBAAoBnD,MAC1D7C,MAAOkB,EAAO4C,SAAS,eAAiB,UAAY,UACpDC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAACuG,EAAAA,EAAsB,CAAChC,SAAS,eAGzCvE,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,KACxC1E,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,aAAYjE,UACvBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQuD,aAAa,QAAQrD,MAC3D7C,MAAOkB,EAAO4C,SAAS,CAAEqC,UAAW,SAAY,UAAY,UAC5DpC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAAC0G,EAAAA,EAAmB,CAACnC,SAAS,eAGtCvE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,eAAcjE,UACzBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQuD,aAAa,UAAUrD,MAC7D7C,MAAOkB,EAAO4C,SAAS,CAAEqC,UAAW,WAAc,UAAY,UAC9DpC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAAC2G,EAAAA,EAAqB,CAACpC,SAAS,eAGxCvE,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,cAAajE,UACxBC,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CACP9D,QAASA,IAAMqB,EAAOwB,QAAQC,QAAQuD,aAAa,SAASrD,MAC5D7C,MAAOkB,EAAO4C,SAAS,CAAEqC,UAAW,UAAa,UAAY,UAC7DpC,KAAK,QAAOtE,UAEZC,EAAAA,EAAAA,KAAC4G,EAAAA,EAAoB,CAACrC,SAAS,eAGvCvE,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAACC,YAAY,WAAWC,UAAQ,KACxC1E,EAAAA,EAAAA,KAAC+D,EAAAA,EAAO,CAACC,MAAM,YAAWjE,UACtBC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAM,CACHxJ,MAjLPmE,EAAO6B,cAAc,aAAakB,WAC/BtD,EAAY,OAAS,QAiLjBD,SAAW8F,GAAMtF,EAAOwB,QAAQC,QAAQ8D,YAAYD,EAAEE,OAAO3J,OAAO8F,MACpEkB,KAAK,QACLnF,GAAI,CACA+H,SAAU,GACV1H,OAAQ,GACR,sBAAuB,CACnB2H,GAAI,GACJC,GAAI,IAEVpH,SAEDe,EAAWiF,KAAK1B,IACbrE,EAAAA,EAAAA,KAACoH,EAAAA,EAAQ,CAAY/J,MAAOgH,EAAMnF,GAAI,CAAEqF,SAAUF,GAAOtE,SACpDsE,GADUA,gBASrC,C,mEC3Qd,MAAMgD,EAAkB,aAEXC,EAAoBC,UAOe,IAPR,UACpCC,EAAS,sBACTtL,EAAqB,SACrBuL,EAAWJ,EAAe,QAC1BK,EAAO,WACPC,EAAU,QACVC,GACuBjJ,EACvB,IAAK6I,EAAUK,QAAS,OAEjB,OAAPH,QAAO,IAAPA,GAAAA,IAEA,MAAMI,EAAUC,SAASC,cAAc,mBACnCF,IAASA,EAAQ3G,MAAMxB,QAAU,QAErC,IACI,MAAMsI,EAAcT,EAAUK,QAAQK,WAAU,GAC1CC,EAAUJ,SAASK,cAAc,OACvCD,EAAQhH,MAAMhC,SAAW,WACzBgJ,EAAQhH,MAAM9B,KAAO,UACrB8I,EAAQhH,MAAM/B,IAAM,UACpB+I,EAAQhH,MAAM8E,MAAQ,QACtBkC,EAAQhH,MAAMrB,QAAU,OACxBqI,EAAQhH,MAAMkH,WAAa,QAC3BN,SAASO,KAAKC,YAAYJ,GAC1BA,EAAQI,YAAYN,GAYSO,KACNA,EAAQlM,iBAAiB,qCACjCE,SAASiM,IAChB,GAAIA,aAAiBC,kBAAoBD,aAAiBE,oBAAqB,CAAC,IAADC,EAC3E,MAAMC,EAAcJ,EAAMpL,MACpByL,EAAUf,SAASK,cAAc,OACvCU,EAAQC,UAAYF,EACpBC,EAAQhM,UAAY2L,EAAM3L,UACP,QAAnB8L,EAAAH,EAAMO,qBAAa,IAAAJ,GAAnBA,EAAqBK,YAAYH,EACrC,MAAO,GAAIL,EAAM1L,UAAUmM,SAAS,eAAgB,CAAC,IAADC,EAChD,MAAM3G,EAAUiG,EAAMM,UAChBD,EAAUf,SAASK,cAAc,OACvCU,EAAQC,UAAYvG,EACpBsG,EAAQhM,UAAY2L,EAAM3L,UACP,QAAnBqM,EAAAV,EAAMO,qBAAa,IAAAG,GAAnBA,EAAqBF,YAAYH,EACrC,IACF,EAGNM,CAAoBnB,GAMpB,MAAMoB,EAAkBnN,EAAsB+L,GACxCqB,EAAevB,SAASK,cAAc,SAC5CkB,EAAaT,YAAcQ,EAC3BlB,EAAQI,YAAYe,GAEpB,MAAMC,EAAiBpB,EAAQqB,WACzBC,GAA8B,OAAdF,QAAc,IAAdA,OAAc,EAAdA,EAAgBG,eAAgB,EAchDC,QAAeC,IAAYL,EAAgB,CAC7CM,MAAO,EACPC,SAAS,EACTtK,gBAAiB,UACjBuK,SAAS,EACT9D,MAAO,IACP1G,OAAQkK,EACRO,YAAa,IACbC,aAAcR,IAGlB1B,SAASO,KAAK4B,YAAY/B,GAE1B,MAAMgC,EAAUR,EAAOS,UAAU,aAAc,GACzCC,EAAM,IAAIC,EAAAA,GAAM,CAClB7F,YAAa,WACb8F,KAAM,KACNC,OAAQ,CAAC,IAAKb,EAAOpK,OAAS,KAIlC8K,EAAII,SAASN,EAAS,OAAQ,EAAG,EAAG,IAAKR,EAAOpK,OAAS,GACzD8K,EAAIK,KAAKjD,GAEC,OAAVE,QAAU,IAAVA,GAAAA,GACJ,CAAE,MAAOgD,GACLC,QAAQD,MAAM,wBAAyBA,GAChC,OAAP/C,QAAO,IAAPA,GAAAA,EAAU+C,GACVE,MAAM,0CACV,CAAC,QACO/C,IAASA,EAAQ3G,MAAMxB,QAAU,OACzC,E,0KC/HJ,MAAMmL,EAAoCA,KACtC,MAAMC,GAAsBC,EAAAA,EAAAA,IAAYC,EAAAA,GAClCC,GAAWC,EAAAA,EAAAA,OACVC,EAAYC,IAAiB9J,EAAAA,EAAAA,UAAkCwJ,GAChEvD,GAAY8D,EAAAA,EAAAA,QAAuB,MACnCC,GAAWC,EAAAA,EAAAA,OAKX,sBAAEtP,IAA0BR,EAAAA,EAAAA,GAAyB,CACvDK,eAAgB,mBAChBE,eAAgB,CAAC,aAAc,YAK7BwP,EAAsBA,CAACC,EAAwCjD,EAA8BpL,KAC/FgO,GAAcM,IAAI,IACXA,EACH,CAACD,GAAU,IACJC,EAAKD,GACR,CAACjD,GAAQpL,MAEd,EAqBP,OACI0B,EAAAA,EAAAA,MAAA,OAAKjC,UAAU,iBAAgBiD,SAAA,EAC3BC,EAAAA,EAAAA,KAACtB,EAAAA,EAAY,CACTE,OAjBOgN,KACfL,EAAS,IAAI,EAiBL1M,OAtBOgN,KACfX,GAASY,EAAAA,EAAAA,IAA+BV,GAAY,EAsB5CtM,WAfcyI,gBAChBD,EAAAA,EAAAA,GAAkB,CACpBE,YACAtL,wBACA0L,QAAU+C,IACNC,QAAQD,MAAM,wBAAyBA,EAAM,GAEnD,KAWE3K,EAAAA,EAAAA,KAAChB,EAAAA,EAAG,CACAC,UAAU,OACVC,GAAI,CACA6M,UAAW,OACXjM,QAAS,OACTkM,UAAW,qBACXxM,gBAAiB,WACnBO,UAEFhB,EAAAA,EAAAA,MAAA,OAAKjC,UAAU,mBAAmBmP,IAAKzE,EAAUzH,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,OAAKlD,UAAU,gBAAeiD,UAC1BC,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO+N,EAAWe,KAAK3J,QACvBxB,SAAW3D,GAAUoO,EAAoB,OAAQ,UAAWpO,GAC5D4D,WAAW,EACXC,eAAe,OAGvBlB,EAAAA,EAAAA,KAAA,OAAKlD,UAAU,iBAAgBiD,UAC3BC,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO+N,EAAWgB,QAAQ5J,QAC1BxB,SAAW3D,GAAUoO,EAAoB,UAAW,UAAWpO,GAC/D8D,MAAO,CACHsF,UAAW,SACXnG,MAAO,OACPiE,SAAU,QACV8H,WAAY,oBACZpG,MAAO,MACPqG,OAAQ,UAEZlL,aAAa,OACbF,eAAe,OAIvBlB,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAAC1H,UAAU,oBAEnBiC,EAAAA,EAAAA,MAAA,OAAKjC,UAAU,iBAAgBiD,SAAA,EAC3BC,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO,OAAO+N,EAAWmB,QAAQ1K,eACjCb,SAAW3D,GAAUoO,EAAoB,UAAW,UAAWpO,EAAMmP,QAAQ,WAAY,KACzFvL,WAAW,KAEfjB,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO+N,EAAWmB,QAAQ/J,QAC1BxB,SAAW3D,GAAUoO,EAAoB,UAAW,UAAWpO,SAIvE2C,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAAC1H,UAAU,oBAEnBiC,EAAAA,EAAAA,MAAA,OAAKjC,UAAU,iBAAgBiD,SAAA,EAC3BC,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO,OAAO+N,EAAWqB,eAAe5K,eACxCb,SAAW3D,GAAUoO,EAAoB,iBAAkB,UAAWpO,EAAMmP,QAAQ,WAAY,KAChGvL,WAAW,KAEfjB,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO+N,EAAWqB,eAAejK,QACjCxB,SAAW3D,GAAUoO,EAAoB,iBAAkB,UAAWpO,SAI9E2C,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAAC1H,UAAU,oBAEnBiC,EAAAA,EAAAA,MAAA,OAAKjC,UAAU,iBAAgBiD,SAAA,EAC3BC,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO,OAAO+N,EAAWsB,UAAU7K,eACnCb,SAAW3D,GAAUoO,EAAoB,YAAa,UAAWpO,EAAMmP,QAAQ,WAAY,KAC3FvL,WAAW,KAEfjB,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO+N,EAAWsB,UAAUlK,QAC5BxB,SAAW3D,GAAUoO,EAAoB,YAAa,UAAWpO,SAIzE2C,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAAC1H,UAAU,oBAEnBiC,EAAAA,EAAAA,MAAA,OAAKjC,UAAU,iBAAgBiD,SAAA,EAC3BC,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO,OAAO+N,EAAWuB,eAAe9K,eACxCb,SAAW3D,GAAUoO,EAAoB,iBAAkB,UAAWpO,EAAMmP,QAAQ,WAAY,KAChGvL,WAAW,KAEfjB,EAAAA,EAAAA,KAACkM,EAAAA,EAAa,CACV7O,MAAO+N,EAAWuB,eAAenK,QACjCxB,SAAW3D,GAAUoO,EAAoB,iBAAkB,UAAWpO,SAI9E2C,EAAAA,EAAAA,KAACwE,EAAAA,EAAO,CAAC1H,UAAU,0BAGzB,EAId,EAAe+D,EAAAA,KAAWiK,E","sources":["customHooks/useExtractComputedStyles.ts","constants/Colors.ts","components/ResumeHeader.tsx","utils/RichTextField.tsx","utils/downloadResumePDF.ts","templates/Professional/ProfessionalResumeBasic.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\n/**\n * Custom hook to extract computed styles from a given root element and its children.\n * It generates a CSS stylesheet string that can be used to apply the extracted styles.\n *\n * @param {Object} options - Configuration options for style extraction.\n * @param {string} options.containerClass - Class name for the container element.\n * @param {string} options.baseStyles - Base styles to include in the stylesheet.\n * @param {string[]} options.skipProperties - List of CSS properties to skip during extraction.\n * @returns {Function} A function that takes a root element and returns a CSS stylesheet string.\n * \n * Example usage:\n * const { extractComputedStyles } = useExtractComputedStyles({\n *   containerClass: 'my-container',\n *   baseStyles: '.my-container { color: red; }',\n *   skipProperties: ['margin', 'padding']\n *  });\n * \n */\n\n\ninterface StyleExtractionOptions {\n    containerClass?: string;  \n    baseStyles?: string;      \n    skipProperties?: string[]; \n}\n\nexport const useExtractComputedStyles = (options: StyleExtractionOptions = {}) => {\n    const {\n        containerClass = 'component-container',\n        baseStyles = '',\n        skipProperties = ['list-style']\n    } = options;\n\n    const extractComputedStyles = useCallback((rootElement: HTMLElement): string => {\n        const allElements = rootElement.querySelectorAll('*');\n        let styleSheet = '';\n\n        /* Add base styles if provided */\n        if (baseStyles) {\n            styleSheet += baseStyles;\n        }\n\n        /* Add default list styles if no custom base styles provided */\n        if (!baseStyles) {\n            styleSheet += `\n                .${containerClass} ul, .${containerClass} ol {\n                    margin: 0;\n                    padding-left: 24px;\n                    list-style-position: outside;\n                }\n                .${containerClass} li {\n                    margin: 4px 0;\n                    padding-left: 4px;\n                    line-height: 1.6;\n                    position: relative;\n                }\n                .${containerClass} ul li {\n                    list-style-type: disc;\n                }\n                .${containerClass} ol {\n                    counter-reset: item;\n                    list-style-type: none;\n                }\n                .${containerClass} ol li {\n                    counter-increment: item;\n                    list-style-type: none;\n                    position: relative;\n                }\n                .${containerClass} ol li::before {\n                    content: counter(item) \".\";\n                    position: absolute;\n                    left: -24px;\n                    width: 20px;\n                    text-align: right;\n                }\n                .${containerClass} p {\n                    margin: 0;\n                    padding: 0;\n                    line-height: 1.6;\n                }\n            `;\n        }\n\n        allElements.forEach((el, index) => {\n            const computed = window.getComputedStyle(el);\n            const className = `static-style-${index}`;\n            el.classList.add(className);\n\n            let styleRule = `.${className} {\\n`;\n            Array.from(computed).forEach(prop => {\n                const value = computed.getPropertyValue(prop);\n\n                /* Skip specified properties if any are passed in the props to this hook */\n                if (value && !skipProperties.some(skipProp => prop.startsWith(skipProp))) {\n                    styleRule += `  ${prop}: ${value};\\n`;\n                }\n            });\n            styleRule += '}\\n';\n            styleSheet += styleRule;\n        });\n\n        return styleSheet;\n    }, [containerClass, baseStyles, skipProperties]);\n\n    return { extractComputedStyles };\n}; ","/**\n * Color constants for the application\n * These colors are used throughout the application to maintain consistency\n */\n\nexport const Colors = {\n    // Primary colors\n    BLACK: '#000000',\n    WHITE: '#FFFFFF',\n    \n    // Accent colors\n    ORANGE: {\n        LIGHT: '#FFA559',\n        MEDIUM: '#FF6B00',\n        DARK: '#E65C00'\n    },\n    \n    // Background colors\n    BACKGROUND: {\n        LIGHT: '#F5F5F5',\n        WHITE: '#FFFFFF',\n        CREAM: '#e9e3cf',\n        OLIVE_GREEN: '#5a6d2c'\n    },\n    \n    // Hover states\n    HOVER: {\n        BLACK: '#333333'\n    },\n    \n    // Text colors\n    TEXT: {\n        WHITE: '#FFFFFF',\n        BLACK: '#000000',\n        DARK: '#333333'   // Dark gray for better readability\n    },\n    \n    // Shadow colors\n    SHADOW: 'rgba(0, 0, 0, 0.1)',\n    \n    // Blue colors\n    BLUE: {\n        PRIMARY: '#1976d2',    // Material-UI primary blue\n        SECONDARY: '#42a5f5',\n        LIGHT: '#e3f2fd',\n        DARK: '#064f96'       // Dark blue for business theme\n    }\n} as const;\n\n// Type for the Colors object\nexport type ColorType = typeof Colors; ","import React from 'react';\nimport { Box, Button } from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport IApplicationConstants from '../constants/Constants';\nimport { Colors } from '../constants/Colors';\n\n/**\n * * Props for the ResumeHeader component\n * * @interface ResumeHeaderProps\n * * @property {Function} onBack - Callback for back button\n * * @property {Function} onSave - Callback for save button\n * * @property {Function} onDownload - Callback for download button\n * * @returns {JSX.Element} - Rendered ResumeHeader component\n * * @description\n * * This component renders the header for the resume builder, including back, save, and download buttons.\n * * It uses Material-UI for styling and icons.\n * * @example\n * * <ResumeHeader\n * *     onBack={() => console.log('Back clicked')}\n * *     onSave={() => console.log('Save clicked')}\n * *     onDownload={() => console.log('Download clicked')}\n * * />\n * \n */\n\ninterface ResumeHeaderProps {\n    onBack: () => void;\n    onSave: () => void;\n    onDownload: () => void;\n}\n\nconst ResumeHeader: React.FC<ResumeHeaderProps> = ({ onBack, onSave, onDownload }) => {\n    return (\n        <Box \n            component=\"header\"\n            sx={{ \n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                height: '64px',\n                backgroundColor: Colors.BACKGROUND.WHITE,\n                boxShadow: `0 2px 4px ${Colors.SHADOW}`,\n                zIndex: 1000,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                padding: '0 24px'\n            }}\n        >\n            <Button \n                variant=\"contained\" \n                onClick={onBack}\n                startIcon={<ArrowBackIcon />}\n                sx={{\n                    backgroundColor: Colors.BLUE.PRIMARY,\n                    color: Colors.TEXT.WHITE,\n                    '&:hover': {\n                        backgroundColor: Colors.BLUE.SECONDARY,\n                    },\n                    '& .MuiSvgIcon-root': {\n                        color: Colors.TEXT.WHITE\n                    }\n                }}\n            >\n                {IApplicationConstants.BACK}\n            </Button>\n            <Box sx={{ display: 'flex', gap: 2 }}>\n                <Button \n                    variant=\"contained\" \n                    onClick={onSave}\n                    sx={{\n                        backgroundColor: Colors.BLUE.PRIMARY,\n                        color: Colors.TEXT.WHITE,\n                        '&:hover': {\n                            backgroundColor: Colors.BLUE.SECONDARY,\n                        }\n                    }}\n                >\n                    {IApplicationConstants.SAVE_CHANGES}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    startIcon={<DownloadIcon />}\n                    onClick={onDownload}\n                    sx={{\n                        backgroundColor: Colors.BLUE.PRIMARY,\n                        color: Colors.TEXT.WHITE,\n                        '&:hover': {\n                            backgroundColor: Colors.BLUE.SECONDARY,\n                        },\n                        '& .MuiSvgIcon-root': {\n                            color: Colors.TEXT.WHITE\n                        }\n                    }}\n                >\n                    {IApplicationConstants.DOWNLOAD}\n                </Button>\n            </Box>\n        </Box>\n    );\n};\n\nexport default React.memo(ResumeHeader); ","import React, { useState } from 'react';\nimport { IconButton, Paper, Tooltip, Select, MenuItem, Divider, Popover, Box } from '@mui/material';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport TitleIcon from '@mui/icons-material/Title';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport FormatColorTextIcon from '@mui/icons-material/FormatColorText';\nimport { useEditor, EditorContent, BubbleMenu } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport TextAlign from '@tiptap/extension-text-align';\nimport Underline from '@tiptap/extension-underline';\nimport TextStyle from '@tiptap/extension-text-style';\nimport FontSize from '@tiptap/extension-font-size';\nimport Color from '@tiptap/extension-color';\nimport '../styles/common.css';\n\n/**\n * This component provides a rich text editor with formatting options\n * such as bold, italic, underline, text alignment, font size, and color.\n * It is designed for use in a resume builder application, allowing users\n * to create and style text content easily.\n */\n\n\nconst FONT_SIZES = ['8px', '10px', '12px', '14px', '16px', '18px', '20px', '24px', '28px', '32px'];\nconst COLORS = [\n    '#000000', // Black\n    '#004c99', // Blue\n    '#2e7d32', // Green\n    '#c62828', // Red\n    '#6a1b9a', // Purple\n    '#f57f17', // Yellow\n    '#d84315', // Orange\n    '#546e7a', // Gray\n];\n\n// Define a custom interface for the editor with only the methods we need\ninterface CustomEditor {\n    getHTML: () => string;\n    chain: () => {\n        focus: () => {\n            setColor: (color: string) => {\n                run: () => void;\n            };\n        };\n    };\n}\n\ninterface RichTextFieldProps {\n    value: string;\n    onChange: (value: string) => void;\n    isHeading?: boolean;\n    isNameHeading?: boolean;\n    style?: React.CSSProperties;\n    defaultColor?: string;\n}\n\nconst RichTextField: React.FC<RichTextFieldProps> = ({ value, onChange, isHeading = false, isNameHeading = false, style, defaultColor }) => {\n    const [colorAnchorEl, setColorAnchorEl] = useState<null | HTMLElement>(null);\n\n    const editor = useEditor({\n        extensions: [\n            StarterKit.configure({\n                heading: {\n                    levels: [1, 2],\n                    HTMLAttributes: {\n                        class: 'resume-heading',\n                    },\n                },\n            }),\n            Underline,\n            TextStyle,\n            FontSize,\n            Color,\n            TextAlign.configure({\n                types: ['heading', 'paragraph'],\n                defaultAlignment: isNameHeading ? 'center' : 'left',\n            }),\n        ],\n        content: value,\n        onUpdate: ({ editor }: { editor: CustomEditor }) => {\n            onChange(editor.getHTML());\n        },\n        editorProps: {\n            attributes: {\n                class: isHeading ? 'resume-heading-editor' : 'rich-text-editor',\n            },\n        },\n        onCreate: ({ editor }: { editor: CustomEditor }) => {\n            if (defaultColor && editor) {\n                editor.chain().focus().setColor(defaultColor).run();\n            }\n        }\n    });\n\n    if (!editor) {\n        return null;\n    }\n\n    const getCurrentFontSize = () => {\n        const fontSize = editor.getAttributes('textStyle').fontSize;\n        return fontSize || (isHeading ? '24px' : '14px');\n    };\n\n    const getCurrentColor = () => {\n        return editor.getAttributes('textStyle').color || '#000000';\n    };\n\n    const handleColorClick = (event: React.MouseEvent<HTMLElement>) => {\n        setColorAnchorEl(event.currentTarget);\n    };\n\n    const handleColorClose = () => {\n        setColorAnchorEl(null);\n    };\n\n    const handleColorSelect = (color: string) => {\n        editor.chain().focus().setColor(color).run();\n        handleColorClose();\n    };\n\n    return (\n        <Box sx={{ position: 'relative' }}>\n            <EditorContent \n                editor={editor} \n                style={style}\n            />\n            {editor && (\n                <BubbleMenu editor={editor} tippyOptions={{ duration: 100 }} className=\"bubble-menu\">\n                    <Paper elevation={3} sx={{ display: 'flex', gap: 1, p: 0.5 }}>\n                        {isHeading && (\n                            <>\n                                <Tooltip title=\"Heading 1\">\n                                    <IconButton\n                                        onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n                                        color={editor.isActive('heading', { level: 1 }) ? 'primary' : 'default'}\n                                        size=\"small\"\n                                    >\n                                        <TitleIcon fontSize=\"small\" />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Heading 2\">\n                                    <IconButton\n                                        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n                                        color={editor.isActive('heading', { level: 2 }) ? 'primary' : 'default'}\n                                        size=\"small\"\n                                    >\n                                        <TitleIcon fontSize=\"small\" style={{ fontSize: '0.8em' }} />\n                                    </IconButton>\n                                </Tooltip>\n                                <Divider orientation=\"vertical\" flexItem />\n                            </>\n                        )}\n                        <Tooltip title=\"Bold\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleBold().run()}\n                                color={editor.isActive('bold') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatBoldIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Italic\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleItalic().run()}\n                                color={editor.isActive('italic') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatItalicIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Underline\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleUnderline().run()}\n                                color={editor.isActive('underline') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatUnderlinedIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Text Color\">\n                            <IconButton\n                                onClick={handleColorClick}\n                                size=\"small\"\n                                sx={{\n                                    color: getCurrentColor(),\n                                    '&:hover': { color: getCurrentColor() }\n                                }}\n                            >\n                                <FormatColorTextIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Popover\n                            open={Boolean(colorAnchorEl)}\n                            anchorEl={colorAnchorEl}\n                            onClose={handleColorClose}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'center',\n                            }}\n                        >\n                            <Paper sx={{ p: 1, display: 'flex', gap: 0.5, flexWrap: 'wrap', maxWidth: 200 }}>\n                                {COLORS.map((color) => (\n                                    <Tooltip key={color} title={color}>\n                                        <IconButton\n                                            onClick={() => handleColorSelect(color)}\n                                            size=\"small\"\n                                            sx={{\n                                                width: 24,\n                                                height: 24,\n                                                backgroundColor: color,\n                                                border: '1px solid #ccc',\n                                                '&:hover': {\n                                                    backgroundColor: color,\n                                                    opacity: 0.8,\n                                                },\n                                            }}\n                                        />\n                                    </Tooltip>\n                                ))}\n                            </Paper>\n                        </Popover>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Bullet List\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleBulletList().run()}\n                                color={editor.isActive('bulletList') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatListBulletedIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Numbered List\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleOrderedList().run()}\n                                color={editor.isActive('orderedList') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatListNumberedIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Align Left\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().setTextAlign('left').run()}\n                                color={editor.isActive({ textAlign: 'left' }) ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatAlignLeftIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Align Center\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().setTextAlign('center').run()}\n                                color={editor.isActive({ textAlign: 'center' }) ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatAlignCenterIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Align Right\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().setTextAlign('right').run()}\n                                color={editor.isActive({ textAlign: 'right' }) ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatAlignRightIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Font Size\">\n                            <Select\n                                value={getCurrentFontSize()}\n                                onChange={(e) => editor.chain().focus().setFontSize(e.target.value).run()}\n                                size=\"small\"\n                                sx={{\n                                    minWidth: 80,\n                                    height: 32,\n                                    '& .MuiSelect-select': {\n                                        py: 0.5,\n                                        px: 1,\n                                    },\n                                }}\n                            >\n                                {FONT_SIZES.map((size) => (\n                                    <MenuItem key={size} value={size} sx={{ fontSize: size }}>\n                                        {size}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </Tooltip>\n                    </Paper>\n                </BubbleMenu>\n            )}\n        </Box>\n    );\n};\n\nexport default RichTextField; ","import { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\n\n\n/**\n * This is a utility function to download a resume as a PDF.\n * It takes a reference to the resume element, extracts computed styles,\n * and handles the PDF generation process.\n * It also provides options for custom filename and callback functions for start, complete, and error events.\n * * @param {DownloadResumePDFOptions} options - The options for downloading the resume PDF.\n * @param {React.RefObject<HTMLDivElement | null>} options.resumeRef - The reference to the resume element.\n * @param {Function} options.extractComputedStyles - A function to extract computed styles from the resume element.\n * @param {string} [options.filename] - The name of the file to save the PDF as. Defaults to 'resume.pdf'.\n * @param {Function} [options.onStart] - Callback function to execute when the download starts.\n * @param {Function} [options.onComplete] - Callback function to execute when the download completes.\n * @param {Function} [options.onError] - Callback function to execute when an error occurs during the download.\n * @returns {Promise<void>} - A promise that resolves when the PDF is downloaded.\n * @throws {Error} - Throws an error if the PDF generation fails.\n * @description\n * This function uses html2canvas to render the resume element to a canvas,\n * then converts that canvas to an image and uses jsPDF to create a PDF document.\n * It hides the resume action buttons during the download process and restores them afterward.\n * It also converts editable text fields in the resume to static text to ensure proper rendering in the PDF.\n * The PDF is saved with the specified filename or 'resume.pdf' by default.\n * It also provides options for handling start, complete, and error events during the download process. \n * \n */\n\ninterface DownloadResumePDFOptions {\n    resumeRef: React.RefObject<HTMLDivElement | null>;\n    extractComputedStyles: (element: HTMLElement) => string;\n    filename?: string;\n    onStart?: () => void;\n    onComplete?: () => void;\n    onError?: (error: any) => void;\n}\n\nconst defaultFilename = 'resume.pdf';\n\nexport const downloadResumePDF = async ({\n    resumeRef,\n    extractComputedStyles,\n    filename = defaultFilename,\n    onStart,\n    onComplete,\n    onError\n}: DownloadResumePDFOptions): Promise<void> => {\n    if (!resumeRef.current) return;\n\n    onStart?.();\n\n    const buttons = document.querySelector('.resume-actions') as HTMLElement;\n    if (buttons) buttons.style.display = 'none';\n\n    try {\n        const resumeClone = resumeRef.current.cloneNode(true) as HTMLElement;\n        const tempDiv = document.createElement('div');\n        tempDiv.style.position = 'absolute';\n        tempDiv.style.left = '-9999px';\n        tempDiv.style.top = '-9999px';\n        tempDiv.style.width = '800px';\n        tempDiv.style.padding = '40px';\n        tempDiv.style.background = 'white';\n        document.body.appendChild(tempDiv);\n        tempDiv.appendChild(resumeClone);\n\n         /**\n             * \n             * @param element HTMLElement\n             * This function converts all editable text fields in the resume to static text.\n             * It replaces input and textarea elements with divs containing their text content.\n             * This is necessary to ensure that the PDF captures the text as static content\n             * and not as editable fields, which can cause issues in the PDF rendering. \n             * \n             */\n\n        const convertToStaticText = (element: HTMLElement) => {\n            const textFields = element.querySelectorAll('.MuiInputBase-input, .ProseMirror');\n            textFields.forEach((field: Element) => {\n                if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) {\n                    const textContent = field.value;\n                    const textDiv = document.createElement('div');\n                    textDiv.innerHTML = textContent;\n                    textDiv.className = field.className;\n                    field.parentElement?.replaceWith(textDiv);\n                } else if (field.classList.contains('ProseMirror')) {\n                    const content = field.innerHTML;\n                    const textDiv = document.createElement('div');\n                    textDiv.innerHTML = content;\n                    textDiv.className = field.className;\n                    field.parentElement?.replaceWith(textDiv);\n                }\n            });\n        };\n\n        convertToStaticText(resumeClone);\n\n\n        /**\n         * * This function extracts computed styles from the cloned resume element.\n         */\n        const extractedStyles = extractComputedStyles(resumeClone);\n        const styleElement = document.createElement('style');\n        styleElement.textContent = extractedStyles;\n        tempDiv.appendChild(styleElement);\n\n        const contentElement = tempDiv.firstChild as HTMLElement;\n        const contentHeight = contentElement?.scrollHeight || 0;\n\n\n        /**\n             * * html2canvas is used to render the content element to a canvas.\n             * * It captures the content with a higher scale for better quality (2),\n             * * and sets the background color to white.\n             * * The width is set to 800px (exact width of component), and the height is dynamically calculated based on the content.\n             * * The canvas is then converted to a JPEG image with maximum quality.\n             * * Finally, jsPDF is used to create a PDF document with the exact dimensions,\n             * * and the image is added to the PDF.\n             * * The PDF is then saved with the filename 'resume.pdf' by default.\n             */\n\n        const canvas = await html2canvas(contentElement, {\n            scale: 2,\n            useCORS: true,\n            backgroundColor: '#ffffff',\n            logging: false,\n            width: 800,\n            height: contentHeight,\n            windowWidth: 800,\n            windowHeight: contentHeight\n        });\n\n        document.body.removeChild(tempDiv);\n        \n        const imgData = canvas.toDataURL('image/jpeg', 1.0);\n        const pdf = new jsPDF({\n            orientation: 'portrait',\n            unit: 'px',\n            format: [800, canvas.height / 2]\n        });\n\n        // Add image with exact width\n        pdf.addImage(imgData, 'JPEG', 0, 0, 800, canvas.height / 2);\n        pdf.save(filename);\n\n        onComplete?.();\n    } catch (error) {\n        console.error('Error generating PDF:', error);\n        onError?.(error);\n        alert('Error generating PDF. Please try again.');\n    } finally {\n        if (buttons) buttons.style.display = 'flex';\n    }\n}; ","import React, { useState, useRef } from 'react';\nimport { TextField, Divider, Box } from '@mui/material';\nimport { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport RichTextField from '../../utils/RichTextField';\nimport '../../styles/common.css';\nimport '../../styles/ProfessionalResumeBasic.css';\nimport { useNavigate } from 'react-router-dom';\nimport { IProfessionalResumeData } from '../../utils/ProfessionalResumeDefaultContent';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProfessionalBasicResumeData, setProfessionalBasicResumeData } from './ProfessionalResumeBasicSlice';\nimport { useExtractComputedStyles } from '../../customHooks/useExtractComputedStyles';\nimport ResumeHeader from '../../components/ResumeHeader';\nimport IApplicationConstants from '../../constants/Constants';\nimport { downloadResumePDF } from '../../utils/downloadResumePDF';\n\n/**\n * \n * @returns The ProfessionalResumeBasic component renders a professional resume template\n *          allowing users to edit their resume details, save changes, and download it as a PDF.\n *         It uses Material-UI for styling and layout, and integrates with Redux for state management.\n *         The component includes features like rich text editing, dynamic section handling,\n *         and PDF generation with exact dimensions and styles.\n */\n\nconst ProfessionalResumeBasic: React.FC = () => {\n    const resumeDataFromStore = useSelector(getProfessionalBasicResumeData);\n    const dispatch = useDispatch();\n    const [resumeData, setResumeData] = useState<IProfessionalResumeData>(resumeDataFromStore);\n    const resumeRef = useRef<HTMLDivElement>(null);\n    const navigate = useNavigate();\n\n    /**\n     * * Custom hook to extract computed styles from the resume container\n     */\n    const { extractComputedStyles } = useExtractComputedStyles({\n        containerClass: 'resume-container',\n        skipProperties: ['list-style', 'cursor'] // Skip cursor styles for PDF export\n    });\n\n\n    \n    const handleSectionChange = (section: keyof IProfessionalResumeData, field: 'heading' | 'content', value: string) => {\n        setResumeData(prev => ({\n            ...prev,\n            [section]: {\n                ...prev[section],\n                [field]: value\n            }\n        }));\n    };\n\n    const handleSave = () => {\n        dispatch(setProfessionalBasicResumeData(resumeData));\n    };\n\n    const handleBack = () => {\n        navigate(`/`);\n    }\n\n    const handleDownloadPDF = async () => {\n        await downloadResumePDF({\n            resumeRef,\n            extractComputedStyles,\n            onError: (error) => {\n                console.error('Error generating PDF:', error);\n            }\n        });\n    };\n\n    return (\n        <div className=\"resume-wrapper\">\n            <ResumeHeader \n                onBack={handleBack}\n                onSave={handleSave}\n                onDownload={handleDownloadPDF}\n            />\n\n            <Box \n                component=\"main\"\n                sx={{\n                    marginTop: '64px',\n                    padding: '24px',\n                    minHeight: 'calc(100vh - 64px)',\n                    backgroundColor: '#f5f5f5'\n                }}\n            >\n                <div className=\"resume-container\" ref={resumeRef}>\n                    <div className=\"resume-header\">\n                        <RichTextField\n                            value={resumeData.name.content}\n                            onChange={(value) => handleSectionChange(\"name\", \"content\", value)}\n                            isHeading={true}\n                            isNameHeading={true}\n                        />\n                    </div>\n                    <div className=\"resume-contact\">\n                        <RichTextField\n                            value={resumeData.contact.content}\n                            onChange={(value) => handleSectionChange(\"contact\", \"content\", value)}\n                            style={{\n                                textAlign: 'center',\n                                color: '#555',\n                                fontSize: '0.9em',\n                                fontFamily: 'Arial, sans-serif',\n                                width: '80%',\n                                margin: '0 auto'\n                            }}\n                            defaultColor=\"#555\"\n                            isNameHeading={true}\n                        />\n                    </div>\n\n                    <Divider className=\"resume-divider\" />\n\n                    <div className=\"resume-section\">\n                        <RichTextField\n                            value={`<h2>${resumeData.summary.heading}</h2>`}\n                            onChange={(value) => handleSectionChange(\"summary\", \"heading\", value.replace(/<[^>]*>/g, ''))}\n                            isHeading={true}\n                        />\n                        <RichTextField\n                            value={resumeData.summary.content}\n                            onChange={(value) => handleSectionChange(\"summary\", \"content\", value)}\n                        />\n                    </div>\n\n                    <Divider className=\"resume-divider\" />\n\n                    <div className=\"resume-section\">\n                        <RichTextField\n                            value={`<h2>${resumeData.workExperience.heading}</h2>`}\n                            onChange={(value) => handleSectionChange(\"workExperience\", \"heading\", value.replace(/<[^>]*>/g, ''))}\n                            isHeading={true}\n                        />\n                        <RichTextField\n                            value={resumeData.workExperience.content}\n                            onChange={(value) => handleSectionChange(\"workExperience\", \"content\", value)}\n                        />\n                    </div>\n\n                    <Divider className=\"resume-divider\" />\n\n                    <div className=\"resume-section\">\n                        <RichTextField\n                            value={`<h2>${resumeData.education.heading}</h2>`}\n                            onChange={(value) => handleSectionChange(\"education\", \"heading\", value.replace(/<[^>]*>/g, ''))}\n                            isHeading={true}\n                        />\n                        <RichTextField\n                            value={resumeData.education.content}\n                            onChange={(value) => handleSectionChange(\"education\", \"content\", value)}\n                        />\n                    </div>\n\n                    <Divider className=\"resume-divider\" />\n\n                    <div className=\"resume-section\">\n                        <RichTextField\n                            value={`<h2>${resumeData.additionalInfo.heading}</h2>`}\n                            onChange={(value) => handleSectionChange(\"additionalInfo\", \"heading\", value.replace(/<[^>]*>/g, ''))}\n                            isHeading={true}\n                        />\n                        <RichTextField\n                            value={resumeData.additionalInfo.content}\n                            onChange={(value) => handleSectionChange(\"additionalInfo\", \"content\", value)}\n                        />\n                    </div>\n\n                    <Divider className=\"resume-divider\" />\n                </div>\n            </Box>\n        </div>\n    );\n};\n\nexport default React.memo(ProfessionalResumeBasic);\n"],"names":["useExtractComputedStyles","options","arguments","length","undefined","containerClass","baseStyles","skipProperties","extractComputedStyles","useCallback","rootElement","allElements","querySelectorAll","styleSheet","forEach","el","index","computed","window","getComputedStyle","className","classList","add","styleRule","Array","from","prop","value","getPropertyValue","some","skipProp","startsWith","Colors","BLACK","WHITE","ORANGE","LIGHT","MEDIUM","DARK","BACKGROUND","CREAM","OLIVE_GREEN","HOVER","TEXT","SHADOW","BLUE","PRIMARY","SECONDARY","ResumeHeader","_ref","onBack","onSave","onDownload","_jsxs","Box","component","sx","position","top","left","right","height","backgroundColor","boxShadow","zIndex","display","alignItems","justifyContent","padding","children","_jsx","Button","variant","onClick","startIcon","ArrowBackIcon","color","IApplicationConstants","BACK","gap","SAVE_CHANGES","DownloadIcon","DOWNLOAD","React","FONT_SIZES","COLORS","onChange","isHeading","isNameHeading","style","defaultColor","colorAnchorEl","setColorAnchorEl","useState","editor","useEditor","extensions","StarterKit","configure","heading","levels","HTMLAttributes","class","Underline","TextStyle","FontSize","Color","TextAlign","types","defaultAlignment","content","onUpdate","_ref2","getHTML","editorProps","attributes","onCreate","_ref3","chain","focus","setColor","run","getCurrentColor","getAttributes","handleColorClose","EditorContent","BubbleMenu","tippyOptions","duration","Paper","elevation","p","_Fragment","Tooltip","title","IconButton","toggleHeading","level","isActive","size","TitleIcon","fontSize","Divider","orientation","flexItem","toggleBold","FormatBoldIcon","toggleItalic","FormatItalicIcon","toggleUnderline","FormatUnderlinedIcon","event","currentTarget","FormatColorTextIcon","Popover","open","Boolean","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","flexWrap","maxWidth","map","handleColorSelect","width","border","opacity","toggleBulletList","FormatListBulletedIcon","toggleOrderedList","FormatListNumberedIcon","setTextAlign","textAlign","FormatAlignLeftIcon","FormatAlignCenterIcon","FormatAlignRightIcon","Select","e","setFontSize","target","minWidth","py","px","MenuItem","defaultFilename","downloadResumePDF","async","resumeRef","filename","onStart","onComplete","onError","current","buttons","document","querySelector","resumeClone","cloneNode","tempDiv","createElement","background","body","appendChild","element","field","HTMLInputElement","HTMLTextAreaElement","_field$parentElement","textContent","textDiv","innerHTML","parentElement","replaceWith","contains","_field$parentElement2","convertToStaticText","extractedStyles","styleElement","contentElement","firstChild","contentHeight","scrollHeight","canvas","html2canvas","scale","useCORS","logging","windowWidth","windowHeight","removeChild","imgData","toDataURL","pdf","jsPDF","unit","format","addImage","save","error","console","alert","ProfessionalResumeBasic","resumeDataFromStore","useSelector","getProfessionalBasicResumeData","dispatch","useDispatch","resumeData","setResumeData","useRef","navigate","useNavigate","handleSectionChange","section","prev","handleBack","handleSave","setProfessionalBasicResumeData","marginTop","minHeight","ref","RichTextField","name","contact","fontFamily","margin","summary","replace","workExperience","education","additionalInfo"],"sourceRoot":""}