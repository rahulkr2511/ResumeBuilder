{"version":3,"file":"static/js/809.a7ff58af.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/PhotoCamera.js","utils/ProfileImagePicker.tsx","customHooks/useExtractComputedStyles.ts","constants/Colors.ts","components/ResumeHeader.tsx","utils/RichTextField.tsx","utils/downloadResumePDF.ts"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"3.2\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 2 7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5\"\n}, \"1\")], 'PhotoCamera');","import React, { useRef, useState } from 'react';\nimport { Box, IconButton, Tooltip } from '@mui/material';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\nimport { Colors } from '../constants/Colors';\n\n/**\n * * * ProfileImagePicker component allows users to select and display a profile image.\n * * * It provides a file input for image selection, displays the selected image,\n * * * and supports customization of size, styles, and tooltip text.\n * * *\n * * @interface ProfileImagePickerProps\n * * @property {Function} onImageSelect - Callback function to handle image selection.\n * * @property {number} [size] - Size of the image container in pixels (default is 150).\n * * @property {React.CSSProperties} [containerStyle] - Custom styles for the container.\n * * @property {React.CSSProperties} [imageStyle] - Custom styles for the image.\n * * @property {string} [tooltipText] - Text to display in the tooltip (default is \"Click to add photo\").\n * * @property {string} [backgroundColor] - Background color of the image container (default is light background).\n * * @property {string} [borderRadius] - Border radius of the image container (default is '75px 75px 0 0').\n * * @property {string} [initialImage] - Initial image URL to display (default is empty).\n * * @returns {JSX.Element} - Rendered ProfileImagePicker component.\n * * @description\n * * This component uses Material-UI for styling and layout.\n * * It includes a file input for selecting images, a tooltip for user guidance,\n * * and handles image preview and selection using the FileReader API.\n * * The component is designed to be reusable and customizable for different use cases.\n * * It also supports an initial image URL to display when the component is first rendered.\n * *\n * @example\n * <ProfileImagePicker\n *    onImageSelect={(imageUrl) => console.log('Selected image URL:', imageUrl)}\n *     size={200}\n * *   containerStyle={{ margin: '20px auto' }}\n * *   imageStyle={{ border: '2px solid #ccc' }}\n * *   tooltipText=\"Upload your profile picture\"\n * *   backgroundColor=\"#f0f0f0\"\n * *   borderRadius=\"50%\"\n * *   initialImage=\"https://example.com/initial-image.jpg\"\n * />\n */\n\n\n\ninterface ProfileImagePickerProps {\n    onImageSelect: (imageUrl: string) => void;\n    size?: number;  // Size in pixels\n    containerStyle?: React.CSSProperties;\n    imageStyle?: React.CSSProperties;\n    tooltipText?: string;\n    backgroundColor?: string;\n    borderRadius?: string;\n    initialImage?: string;  // Add this prop for initial image URL\n}\n\nconst ProfileImagePicker: React.FC<ProfileImagePickerProps> = ({\n    onImageSelect,\n    size = 150,\n    containerStyle,\n    imageStyle,\n    tooltipText = \"Click to add photo\",\n    backgroundColor = Colors.BACKGROUND.LIGHT,\n    borderRadius = '75px 75px 0 0',\n    initialImage = ''  // Add default value\n}) => {\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [imageUrl, setImageUrl] = useState<string>(initialImage);  // Initialize with initialImage\n\n    // Update imageUrl when initialImage changes\n    React.useEffect(() => {\n        if (initialImage) {\n            setImageUrl(initialImage);\n        }\n    }, [initialImage]);\n\n    const handleImageClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const result = e.target?.result as string;\n                setImageUrl(result);\n                onImageSelect(result);\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n    return (\n        <Box sx={{ \n            width: '100%', \n            display: 'flex', \n            justifyContent: 'center',\n            mb: 3,\n            position: 'relative',\n            ...containerStyle\n        }}>\n            <Tooltip title={tooltipText}>\n                <Box\n                    onClick={handleImageClick}\n                    sx={{\n                        width: size,\n                        height: size,\n                        position: 'relative',\n                        overflow: 'hidden',\n                        backgroundColor,\n                        borderRadius,\n                        cursor: 'pointer',\n                        transition: 'opacity 0.2s',\n                        '&:hover': {\n                            opacity: 0.9\n                        },\n                        ...imageStyle\n                    }}\n                >\n                    {imageUrl ? (\n                        <Box\n                            component=\"img\"\n                            src={imageUrl}\n                            alt=\"Profile\"\n                            sx={{\n                                width: '100%',\n                                height: '100%',\n                                objectFit: 'cover',\n                                position: 'relative',\n                                zIndex: 0,\n                                transform: 'scale(1.2)',\n                                transformOrigin: 'center center'\n                            }}\n                        />\n                    ) : (\n                        <Box\n                            sx={{\n                                width: '100%',\n                                height: '100%',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                position: 'relative',\n                                zIndex: 0,\n                                backgroundColor\n                            }}\n                        >\n                            <PhotoCameraIcon sx={{ fontSize: size * 0.27, color: Colors.TEXT.DARK }} />\n                        </Box>\n                    )}\n                </Box>\n            </Tooltip>\n            <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={handleFileChange}\n                accept=\"image/*\"\n                style={{ display: 'none' }}\n            />\n        </Box>\n    );\n};\n\nexport default ProfileImagePicker; ","import { useCallback } from 'react';\n\n/**\n * Custom hook to extract computed styles from a given root element and its children.\n * It generates a CSS stylesheet string that can be used to apply the extracted styles.\n *\n * @param {Object} options - Configuration options for style extraction.\n * @param {string} options.containerClass - Class name for the container element.\n * @param {string} options.baseStyles - Base styles to include in the stylesheet.\n * @param {string[]} options.skipProperties - List of CSS properties to skip during extraction.\n * @returns {Function} A function that takes a root element and returns a CSS stylesheet string.\n * \n * Example usage:\n * const { extractComputedStyles } = useExtractComputedStyles({\n *   containerClass: 'my-container',\n *   baseStyles: '.my-container { color: red; }',\n *   skipProperties: ['margin', 'padding']\n *  });\n * \n */\n\n\ninterface StyleExtractionOptions {\n    containerClass?: string;  \n    baseStyles?: string;      \n    skipProperties?: string[]; \n}\n\nexport const useExtractComputedStyles = (options: StyleExtractionOptions = {}) => {\n    const {\n        containerClass = 'component-container',\n        baseStyles = '',\n        skipProperties = ['list-style']\n    } = options;\n\n    const extractComputedStyles = useCallback((rootElement: HTMLElement): string => {\n        const allElements = rootElement.querySelectorAll('*');\n        let styleSheet = '';\n\n        /* Add base styles if provided */\n        if (baseStyles) {\n            styleSheet += baseStyles;\n        }\n\n        /* Add default list styles if no custom base styles provided */\n        if (!baseStyles) {\n            styleSheet += `\n                .${containerClass} ul, .${containerClass} ol {\n                    margin: 0;\n                    padding-left: 24px;\n                    list-style-position: outside;\n                }\n                .${containerClass} li {\n                    margin: 4px 0;\n                    padding-left: 4px;\n                    line-height: 1.6;\n                    position: relative;\n                }\n                .${containerClass} ul li {\n                    list-style-type: disc;\n                }\n                .${containerClass} ol {\n                    counter-reset: item;\n                    list-style-type: none;\n                }\n                .${containerClass} ol li {\n                    counter-increment: item;\n                    list-style-type: none;\n                    position: relative;\n                }\n                .${containerClass} ol li::before {\n                    content: counter(item) \".\";\n                    position: absolute;\n                    left: -24px;\n                    width: 20px;\n                    text-align: right;\n                }\n                .${containerClass} p {\n                    margin: 0;\n                    padding: 0;\n                    line-height: 1.6;\n                }\n            `;\n        }\n\n        allElements.forEach((el, index) => {\n            const computed = window.getComputedStyle(el);\n            const className = `static-style-${index}`;\n            el.classList.add(className);\n\n            let styleRule = `.${className} {\\n`;\n            Array.from(computed).forEach(prop => {\n                const value = computed.getPropertyValue(prop);\n\n                /* Skip specified properties if any are passed in the props to this hook */\n                if (value && !skipProperties.some(skipProp => prop.startsWith(skipProp))) {\n                    styleRule += `  ${prop}: ${value};\\n`;\n                }\n            });\n            styleRule += '}\\n';\n            styleSheet += styleRule;\n        });\n\n        return styleSheet;\n    }, [containerClass, baseStyles, skipProperties]);\n\n    return { extractComputedStyles };\n}; ","/**\n * Color constants for the application\n * These colors are used throughout the application to maintain consistency\n */\n\nexport const Colors = {\n    // Primary colors\n    BLACK: '#000000',\n    WHITE: '#FFFFFF',\n    \n    // Accent colors\n    ORANGE: {\n        LIGHT: '#FFA559',\n        MEDIUM: '#FF6B00',\n        DARK: '#E65C00'\n    },\n    \n    // Background colors\n    BACKGROUND: {\n        LIGHT: '#F5F5F5',\n        WHITE: '#FFFFFF',\n        CREAM: '#e9e3cf',\n        OLIVE_GREEN: '#5a6d2c'\n    },\n    \n    // Hover states\n    HOVER: {\n        BLACK: '#333333'\n    },\n    \n    // Text colors\n    TEXT: {\n        WHITE: '#FFFFFF',\n        BLACK: '#000000',\n        DARK: '#333333'   // Dark gray for better readability\n    },\n    \n    // Shadow colors\n    SHADOW: 'rgba(0, 0, 0, 0.1)',\n    \n    // Blue colors\n    BLUE: {\n        PRIMARY: '#1976d2',    // Material-UI primary blue\n        SECONDARY: '#42a5f5',\n        LIGHT: '#e3f2fd',\n        DARK: '#064f96'       // Dark blue for business theme\n    }\n} as const;\n\n// Type for the Colors object\nexport type ColorType = typeof Colors; ","import React from 'react';\nimport { Box, Button } from '@mui/material';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport IApplicationConstants from '../constants/Constants';\nimport { Colors } from '../constants/Colors';\n\n/**\n * * Props for the ResumeHeader component\n * * @interface ResumeHeaderProps\n * * @property {Function} onBack - Callback for back button\n * * @property {Function} onSave - Callback for save button\n * * @property {Function} onDownload - Callback for download button\n * * @returns {JSX.Element} - Rendered ResumeHeader component\n * * @description\n * * This component renders the header for the resume builder, including back, save, and download buttons.\n * * It uses Material-UI for styling and icons.\n * * @example\n * * <ResumeHeader\n * *     onBack={() => console.log('Back clicked')}\n * *     onSave={() => console.log('Save clicked')}\n * *     onDownload={() => console.log('Download clicked')}\n * * />\n * \n */\n\ninterface ResumeHeaderProps {\n    onBack: () => void;\n    onSave: () => void;\n    onDownload: () => void;\n}\n\nconst ResumeHeader: React.FC<ResumeHeaderProps> = ({ onBack, onSave, onDownload }) => {\n    return (\n        <Box \n            component=\"header\"\n            sx={{ \n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                height: '64px',\n                backgroundColor: Colors.BACKGROUND.WHITE,\n                boxShadow: `0 2px 4px ${Colors.SHADOW}`,\n                zIndex: 1000,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                padding: '0 24px'\n            }}\n        >\n            <Button \n                variant=\"contained\" \n                onClick={onBack}\n                startIcon={<ArrowBackIcon />}\n                sx={{\n                    backgroundColor: Colors.BLUE.PRIMARY,\n                    color: Colors.TEXT.WHITE,\n                    '&:hover': {\n                        backgroundColor: Colors.BLUE.SECONDARY,\n                    },\n                    '& .MuiSvgIcon-root': {\n                        color: Colors.TEXT.WHITE\n                    }\n                }}\n            >\n                {IApplicationConstants.BACK}\n            </Button>\n            <Box sx={{ display: 'flex', gap: 2 }}>\n                <Button \n                    variant=\"contained\" \n                    onClick={onSave}\n                    sx={{\n                        backgroundColor: Colors.BLUE.PRIMARY,\n                        color: Colors.TEXT.WHITE,\n                        '&:hover': {\n                            backgroundColor: Colors.BLUE.SECONDARY,\n                        }\n                    }}\n                >\n                    {IApplicationConstants.SAVE_CHANGES}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    startIcon={<DownloadIcon />}\n                    onClick={onDownload}\n                    sx={{\n                        backgroundColor: Colors.BLUE.PRIMARY,\n                        color: Colors.TEXT.WHITE,\n                        '&:hover': {\n                            backgroundColor: Colors.BLUE.SECONDARY,\n                        },\n                        '& .MuiSvgIcon-root': {\n                            color: Colors.TEXT.WHITE\n                        }\n                    }}\n                >\n                    {IApplicationConstants.DOWNLOAD}\n                </Button>\n            </Box>\n        </Box>\n    );\n};\n\nexport default React.memo(ResumeHeader); ","import React, { useState } from 'react';\nimport { IconButton, Paper, Tooltip, Select, MenuItem, Divider, Popover, Box } from '@mui/material';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';\nimport TitleIcon from '@mui/icons-material/Title';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport FormatColorTextIcon from '@mui/icons-material/FormatColorText';\nimport { useEditor, EditorContent, BubbleMenu } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport TextAlign from '@tiptap/extension-text-align';\nimport Underline from '@tiptap/extension-underline';\nimport TextStyle from '@tiptap/extension-text-style';\nimport FontSize from '@tiptap/extension-font-size';\nimport Color from '@tiptap/extension-color';\nimport '../styles/common.css';\n\n/**\n * This component provides a rich text editor with formatting options\n * such as bold, italic, underline, text alignment, font size, and color.\n * It is designed for use in a resume builder application, allowing users\n * to create and style text content easily.\n */\n\n\nconst FONT_SIZES = ['8px', '10px', '12px', '14px', '16px', '18px', '20px', '24px', '28px', '32px'];\nconst COLORS = [\n    '#000000', // Black\n    '#004c99', // Blue\n    '#2e7d32', // Green\n    '#c62828', // Red\n    '#6a1b9a', // Purple\n    '#f57f17', // Yellow\n    '#d84315', // Orange\n    '#546e7a', // Gray\n];\n\n// Define a custom interface for the editor with only the methods we need\ninterface CustomEditor {\n    getHTML: () => string;\n    chain: () => {\n        focus: () => {\n            setColor: (color: string) => {\n                run: () => void;\n            };\n        };\n    };\n}\n\ninterface RichTextFieldProps {\n    value: string;\n    onChange: (value: string) => void;\n    isHeading?: boolean;\n    isNameHeading?: boolean;\n    style?: React.CSSProperties;\n    defaultColor?: string;\n}\n\nconst RichTextField: React.FC<RichTextFieldProps> = ({ value, onChange, isHeading = false, isNameHeading = false, style, defaultColor }) => {\n    const [colorAnchorEl, setColorAnchorEl] = useState<null | HTMLElement>(null);\n\n    const editor = useEditor({\n        extensions: [\n            StarterKit.configure({\n                heading: {\n                    levels: [1, 2],\n                    HTMLAttributes: {\n                        class: 'resume-heading',\n                    },\n                },\n            }),\n            Underline,\n            TextStyle,\n            FontSize,\n            Color,\n            TextAlign.configure({\n                types: ['heading', 'paragraph'],\n                defaultAlignment: isNameHeading ? 'center' : 'left',\n            }),\n        ],\n        content: value,\n        onUpdate: ({ editor }: { editor: CustomEditor }) => {\n            onChange(editor.getHTML());\n        },\n        editorProps: {\n            attributes: {\n                class: isHeading ? 'resume-heading-editor' : 'rich-text-editor',\n            },\n        },\n        onCreate: ({ editor }: { editor: CustomEditor }) => {\n            if (defaultColor && editor) {\n                editor.chain().focus().setColor(defaultColor).run();\n            }\n        }\n    });\n\n    if (!editor) {\n        return null;\n    }\n\n    const getCurrentFontSize = () => {\n        const fontSize = editor.getAttributes('textStyle').fontSize;\n        return fontSize || (isHeading ? '24px' : '14px');\n    };\n\n    const getCurrentColor = () => {\n        return editor.getAttributes('textStyle').color || '#000000';\n    };\n\n    const handleColorClick = (event: React.MouseEvent<HTMLElement>) => {\n        setColorAnchorEl(event.currentTarget);\n    };\n\n    const handleColorClose = () => {\n        setColorAnchorEl(null);\n    };\n\n    const handleColorSelect = (color: string) => {\n        editor.chain().focus().setColor(color).run();\n        handleColorClose();\n    };\n\n    return (\n        <Box sx={{ position: 'relative' }}>\n            <EditorContent \n                editor={editor} \n                style={style}\n            />\n            {editor && (\n                <BubbleMenu editor={editor} tippyOptions={{ duration: 100 }} className=\"bubble-menu\">\n                    <Paper elevation={3} sx={{ display: 'flex', gap: 1, p: 0.5 }}>\n                        {isHeading && (\n                            <>\n                                <Tooltip title=\"Heading 1\">\n                                    <IconButton\n                                        onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n                                        color={editor.isActive('heading', { level: 1 }) ? 'primary' : 'default'}\n                                        size=\"small\"\n                                    >\n                                        <TitleIcon fontSize=\"small\" />\n                                    </IconButton>\n                                </Tooltip>\n                                <Tooltip title=\"Heading 2\">\n                                    <IconButton\n                                        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n                                        color={editor.isActive('heading', { level: 2 }) ? 'primary' : 'default'}\n                                        size=\"small\"\n                                    >\n                                        <TitleIcon fontSize=\"small\" style={{ fontSize: '0.8em' }} />\n                                    </IconButton>\n                                </Tooltip>\n                                <Divider orientation=\"vertical\" flexItem />\n                            </>\n                        )}\n                        <Tooltip title=\"Bold\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleBold().run()}\n                                color={editor.isActive('bold') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatBoldIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Italic\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleItalic().run()}\n                                color={editor.isActive('italic') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatItalicIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Underline\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleUnderline().run()}\n                                color={editor.isActive('underline') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatUnderlinedIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Text Color\">\n                            <IconButton\n                                onClick={handleColorClick}\n                                size=\"small\"\n                                sx={{\n                                    color: getCurrentColor(),\n                                    '&:hover': { color: getCurrentColor() }\n                                }}\n                            >\n                                <FormatColorTextIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Popover\n                            open={Boolean(colorAnchorEl)}\n                            anchorEl={colorAnchorEl}\n                            onClose={handleColorClose}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'center',\n                            }}\n                        >\n                            <Paper sx={{ p: 1, display: 'flex', gap: 0.5, flexWrap: 'wrap', maxWidth: 200 }}>\n                                {COLORS.map((color) => (\n                                    <Tooltip key={color} title={color}>\n                                        <IconButton\n                                            onClick={() => handleColorSelect(color)}\n                                            size=\"small\"\n                                            sx={{\n                                                width: 24,\n                                                height: 24,\n                                                backgroundColor: color,\n                                                border: '1px solid #ccc',\n                                                '&:hover': {\n                                                    backgroundColor: color,\n                                                    opacity: 0.8,\n                                                },\n                                            }}\n                                        />\n                                    </Tooltip>\n                                ))}\n                            </Paper>\n                        </Popover>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Bullet List\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleBulletList().run()}\n                                color={editor.isActive('bulletList') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatListBulletedIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Numbered List\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().toggleOrderedList().run()}\n                                color={editor.isActive('orderedList') ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatListNumberedIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Align Left\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().setTextAlign('left').run()}\n                                color={editor.isActive({ textAlign: 'left' }) ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatAlignLeftIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Align Center\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().setTextAlign('center').run()}\n                                color={editor.isActive({ textAlign: 'center' }) ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatAlignCenterIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Align Right\">\n                            <IconButton\n                                onClick={() => editor.chain().focus().setTextAlign('right').run()}\n                                color={editor.isActive({ textAlign: 'right' }) ? 'primary' : 'default'}\n                                size=\"small\"\n                            >\n                                <FormatAlignRightIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Font Size\">\n                            <Select\n                                value={getCurrentFontSize()}\n                                onChange={(e) => editor.chain().focus().setFontSize(e.target.value).run()}\n                                size=\"small\"\n                                sx={{\n                                    minWidth: 80,\n                                    height: 32,\n                                    '& .MuiSelect-select': {\n                                        py: 0.5,\n                                        px: 1,\n                                    },\n                                }}\n                            >\n                                {FONT_SIZES.map((size) => (\n                                    <MenuItem key={size} value={size} sx={{ fontSize: size }}>\n                                        {size}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </Tooltip>\n                    </Paper>\n                </BubbleMenu>\n            )}\n        </Box>\n    );\n};\n\nexport default RichTextField; ","import { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\n\n\n/**\n * This is a utility function to download a resume as a PDF.\n * It takes a reference to the resume element, extracts computed styles,\n * and handles the PDF generation process.\n * It also provides options for custom filename and callback functions for start, complete, and error events.\n * * @param {DownloadResumePDFOptions} options - The options for downloading the resume PDF.\n * @param {React.RefObject<HTMLDivElement | null>} options.resumeRef - The reference to the resume element.\n * @param {Function} options.extractComputedStyles - A function to extract computed styles from the resume element.\n * @param {string} [options.filename] - The name of the file to save the PDF as. Defaults to 'resume.pdf'.\n * @param {Function} [options.onStart] - Callback function to execute when the download starts.\n * @param {Function} [options.onComplete] - Callback function to execute when the download completes.\n * @param {Function} [options.onError] - Callback function to execute when an error occurs during the download.\n * @returns {Promise<void>} - A promise that resolves when the PDF is downloaded.\n * @throws {Error} - Throws an error if the PDF generation fails.\n * @description\n * This function uses html2canvas to render the resume element to a canvas,\n * then converts that canvas to an image and uses jsPDF to create a PDF document.\n * It hides the resume action buttons during the download process and restores them afterward.\n * It also converts editable text fields in the resume to static text to ensure proper rendering in the PDF.\n * The PDF is saved with the specified filename or 'resume.pdf' by default.\n * It also provides options for handling start, complete, and error events during the download process. \n * \n */\n\ninterface DownloadResumePDFOptions {\n    resumeRef: React.RefObject<HTMLDivElement | null>;\n    extractComputedStyles: (element: HTMLElement) => string;\n    filename?: string;\n    onStart?: () => void;\n    onComplete?: () => void;\n    onError?: (error: any) => void;\n}\n\nconst defaultFilename = 'resume.pdf';\n\nexport const downloadResumePDF = async ({\n    resumeRef,\n    extractComputedStyles,\n    filename = defaultFilename,\n    onStart,\n    onComplete,\n    onError\n}: DownloadResumePDFOptions): Promise<void> => {\n    if (!resumeRef.current) return;\n\n    onStart?.();\n\n    const buttons = document.querySelector('.resume-actions') as HTMLElement;\n    if (buttons) buttons.style.display = 'none';\n\n    try {\n        const resumeClone = resumeRef.current.cloneNode(true) as HTMLElement;\n        const tempDiv = document.createElement('div');\n        tempDiv.style.position = 'absolute';\n        tempDiv.style.left = '-9999px';\n        tempDiv.style.top = '-9999px';\n        tempDiv.style.width = '800px';\n        tempDiv.style.padding = '40px';\n        tempDiv.style.background = 'white';\n        document.body.appendChild(tempDiv);\n        tempDiv.appendChild(resumeClone);\n\n         /**\n             * \n             * @param element HTMLElement\n             * This function converts all editable text fields in the resume to static text.\n             * It replaces input and textarea elements with divs containing their text content.\n             * This is necessary to ensure that the PDF captures the text as static content\n             * and not as editable fields, which can cause issues in the PDF rendering. \n             * \n             */\n\n        const convertToStaticText = (element: HTMLElement) => {\n            const textFields = element.querySelectorAll('.MuiInputBase-input, .ProseMirror');\n            textFields.forEach((field: Element) => {\n                if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) {\n                    const textContent = field.value;\n                    const textDiv = document.createElement('div');\n                    textDiv.innerHTML = textContent;\n                    textDiv.className = field.className;\n                    field.parentElement?.replaceWith(textDiv);\n                } else if (field.classList.contains('ProseMirror')) {\n                    const content = field.innerHTML;\n                    const textDiv = document.createElement('div');\n                    textDiv.innerHTML = content;\n                    textDiv.className = field.className;\n                    field.parentElement?.replaceWith(textDiv);\n                }\n            });\n        };\n\n        convertToStaticText(resumeClone);\n\n\n        /**\n         * * This function extracts computed styles from the cloned resume element.\n         */\n        const extractedStyles = extractComputedStyles(resumeClone);\n        const styleElement = document.createElement('style');\n        styleElement.textContent = extractedStyles;\n        tempDiv.appendChild(styleElement);\n\n        const contentElement = tempDiv.firstChild as HTMLElement;\n        const contentHeight = contentElement?.scrollHeight || 0;\n\n\n        /**\n             * * html2canvas is used to render the content element to a canvas.\n             * * It captures the content with a higher scale for better quality (2),\n             * * and sets the background color to white.\n             * * The width is set to 800px (exact width of component), and the height is dynamically calculated based on the content.\n             * * The canvas is then converted to a JPEG image with maximum quality.\n             * * Finally, jsPDF is used to create a PDF document with the exact dimensions,\n             * * and the image is added to the PDF.\n             * * The PDF is then saved with the filename 'resume.pdf' by default.\n             */\n\n        const canvas = await html2canvas(contentElement, {\n            scale: 2,\n            useCORS: true,\n            backgroundColor: '#ffffff',\n            logging: false,\n            width: 800,\n            height: contentHeight,\n            windowWidth: 800,\n            windowHeight: contentHeight\n        });\n\n        document.body.removeChild(tempDiv);\n        \n        const imgData = canvas.toDataURL('image/jpeg', 1.0);\n        const pdf = new jsPDF({\n            orientation: 'portrait',\n            unit: 'px',\n            format: [800, canvas.height / 2]\n        });\n\n        // Add image with exact width\n        pdf.addImage(imgData, 'JPEG', 0, 0, 800, canvas.height / 2);\n        pdf.save(filename);\n\n        onComplete?.();\n    } catch (error) {\n        console.error('Error generating PDF:', error);\n        onError?.(error);\n        alert('Error generating PDF. Please try again.');\n    } finally {\n        if (buttons) buttons.style.display = 'flex';\n    }\n}; "],"names":["createSvgIcon","_jsx","cx","cy","r","d","_ref","onImageSelect","size","containerStyle","imageStyle","tooltipText","backgroundColor","Colors","BACKGROUND","LIGHT","borderRadius","initialImage","fileInputRef","useRef","imageUrl","setImageUrl","useState","React","_jsxs","Box","sx","width","display","justifyContent","mb","position","children","Tooltip","title","onClick","handleImageClick","_fileInputRef$current","current","click","height","overflow","cursor","transition","opacity","component","src","alt","objectFit","zIndex","transform","transformOrigin","alignItems","PhotoCameraIcon","fontSize","color","TEXT","DARK","type","ref","onChange","event","_event$target$files","file","target","files","reader","FileReader","onload","e","_e$target","result","readAsDataURL","accept","style","useExtractComputedStyles","options","arguments","length","undefined","containerClass","baseStyles","skipProperties","extractComputedStyles","useCallback","rootElement","allElements","querySelectorAll","styleSheet","forEach","el","index","computed","window","getComputedStyle","className","classList","add","styleRule","Array","from","prop","value","getPropertyValue","some","skipProp","startsWith","BLACK","WHITE","ORANGE","MEDIUM","CREAM","OLIVE_GREEN","HOVER","SHADOW","BLUE","PRIMARY","SECONDARY","ResumeHeader","onBack","onSave","onDownload","top","left","right","boxShadow","padding","Button","variant","startIcon","ArrowBackIcon","IApplicationConstants","BACK","gap","SAVE_CHANGES","DownloadIcon","DOWNLOAD","FONT_SIZES","COLORS","isHeading","isNameHeading","defaultColor","colorAnchorEl","setColorAnchorEl","editor","useEditor","extensions","StarterKit","configure","heading","levels","HTMLAttributes","class","Underline","TextStyle","FontSize","Color","TextAlign","types","defaultAlignment","content","onUpdate","_ref2","getHTML","editorProps","attributes","onCreate","_ref3","chain","focus","setColor","run","getCurrentColor","getAttributes","handleColorClose","EditorContent","BubbleMenu","tippyOptions","duration","Paper","elevation","p","_Fragment","IconButton","toggleHeading","level","isActive","TitleIcon","Divider","orientation","flexItem","toggleBold","FormatBoldIcon","toggleItalic","FormatItalicIcon","toggleUnderline","FormatUnderlinedIcon","currentTarget","FormatColorTextIcon","Popover","open","Boolean","anchorEl","onClose","anchorOrigin","vertical","horizontal","flexWrap","maxWidth","map","handleColorSelect","border","toggleBulletList","FormatListBulletedIcon","toggleOrderedList","FormatListNumberedIcon","setTextAlign","textAlign","FormatAlignLeftIcon","FormatAlignCenterIcon","FormatAlignRightIcon","Select","setFontSize","minWidth","py","px","MenuItem","defaultFilename","downloadResumePDF","async","resumeRef","filename","onStart","onComplete","onError","buttons","document","querySelector","resumeClone","cloneNode","tempDiv","createElement","background","body","appendChild","element","field","HTMLInputElement","HTMLTextAreaElement","_field$parentElement","textContent","textDiv","innerHTML","parentElement","replaceWith","contains","_field$parentElement2","convertToStaticText","extractedStyles","styleElement","contentElement","firstChild","contentHeight","scrollHeight","canvas","html2canvas","scale","useCORS","logging","windowWidth","windowHeight","removeChild","imgData","toDataURL","pdf","jsPDF","unit","format","addImage","save","error","console","alert"],"sourceRoot":""}